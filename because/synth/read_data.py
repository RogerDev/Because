"""
Read a previously generated synthetic data .csv file, and convert to dataset format.

Dataset format is dictionary of random variable name -> list of values -- 
{rvName: [value1, value2, ...], ...}.

Defines class Reader used to read the .csv as a dataset.

Example:
    r = Reader('models/M4.csv')
    ds = r.read()
"""
import numpy as np
import random


class Reader():

    """
    Reader Class for reading previously created synthetic data .csv
    """
    def __init__(self, input, limit=0, quiet=False):
        """
        Constructor for Reader class.

        Args:
            input (string): The input filepath.  Should be a .csv file,
                            typically generated by synth/Gen.
            limit (int, optional): The maximum number of observations to return
                            for each variable. Defaults to 0 -- read all input.
            quiet (bool, optional): If true, suppresses any status messages.
                            Defaults to False.
        """
        if limit == 0:
            self.limit = 100000000
        else:
            self.limit = limit
        self.varData = {}
        self.vars = []
        self.varIndex = {}
        self.sampleCount = 0
        f = open(input, 'r')
        lines = f.readlines()
        varNames = lines[0]
        data = lines[1:]
        tokens = varNames[:-1].split(',')
        for varName in tokens:
            # Get rid of any quotes
            varName = varName.replace('"', '')
            varName = varName.replace("'", "")
            self.vars.append(varName)
            self.varData[varName] = []
            self.varIndex[varName] = len(self.vars) - 1
        if len(data) < limit:
            print('*** Number of datapoints is less than requested limit (', len(data), ' vs ', self.limit, ') -- Using data length')
        # If limit is less than length of data, select a random starting point that will produce enough (i.e. limit) datapoints
        if len(data) > self.limit:
            datalen = len(lines)
            dataslack = datalen - self.limit
            datastart = random.choice(range(dataslack))
            data = data[datastart:datastart + self.limit]
        for line in data:
            outFields = []
            if len(line) <= 1:
                # Skip any empty lines.
                continue
            if line[-1] == '\n':
                line = line[:-1]
            tokens = line.split(',')
            for i in range(len(self.vars)):
                # Remove any quotes.
                val = tokens[i]
                val = val.replace('"', '')
                val = val.replace("'", "")
                try:
                    val = float(val)
                except:
                    # Must be a string. Let it go as is.
                    pass
                outFields.append(val)
            if len(outFields) == len(self.vars):
                for i in range(len(self.vars)):
                    val = outFields[i]
                    self.varData[self.vars[i]].append(val)
        self.sampleCount = len(self.varData[self.vars[0]])
        if not quiet:
            print('getData: ', len(data), 'records read.')
        #np.random.shuffle(self.vars)

    def read(self):
        """
        Return a dataset based on the input .csv filepath from the constructor.

        Returns:
            dict: Dictionary of variable name to list of values.
        """
        return self.varData
		
		
    def getSeriesNames(self):
        """
        Returns the list of variable names.

        Names are returned in the original order listed in the .csv file.

        Returns:
            list: List of variable names.
        """
        return self.vars[:]
		
    def getSeries(self, varName):
        """
        Return a list of observed values for a single variable.

        Args:
            varName (string): A variable name contained in the input file.

        Returns:
            list: A list of observations for the given variable.
        """
        return self.varData[varName][:self.limit]
		
    def getIndexForSeries(self, varName):
        """
        Find the index of a particular variable within the .csv file

        Args:
            varName (string): The random variable name.

        Returns:
            int: The zero-based index of the variable
        """
        return self.varIndex[varName]
			
	

				
		